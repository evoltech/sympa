. remove_face_from_webarchive.diff - this removes the Face header from
the archives for a list, if this is not removed, the header is shown
in the webarchive as an ugly string of characters, rather than the
actual .png

. Precedence_builk.diff - changes the Precedence header from 'list' to
'bulk', to get more auto-responders to respect the precendence. According
to Adam Berstein from EE on the sympa-users list, more auto-responders
respect 'bulk' over 'list' (especially older Exchange servers).

. pending_norename.diff - renaming a list causes it to become pending.
As https://user.riseup.net/ticket/289676 describes, when you rename a
list it causes the list to become pending, which then requires
approval again. This patch changes that, but the message to the
listmasters about the request to rename list is maintained as it may
be useful in cases where a list has been renamed to riseup-sysadmins
(for example) that the listmasters be aware of the new names.

. localizedVariables.diff - bounced.pl was dying randomly due to this
error: $/ as given is currently unsupported at
/usr/share/perl5/MIME/Decoder/NBit.pm line 140 details in
https://sourcesup.cru.fr/tracker/?func=detail&aid=3271&group_id=23&atid=167

. listowners_not_listmasters.diff - all emails using the
mail_tt2/listowner_notification.tt2 template are being sent to 
listmasters and not the intended recipient, listowners, this patch
fixes the function that gets the owner address so its called properly,
instead of default sending the mail to all the list admins.

archive_delete_send_fix.diff - cannot delete or messages from web
archive by hitting the button, would get this error:

ERROR () – Syntax errors with the following parameters : month
Operation successful. The message will be deleted as soon as possible.
This task may be performed in a few minutes.

. refuse_subscriptions_before_approval - Before a list has been
approved, people can subscribe people to it. This means that people
get a message about being subscribed to a list. This is really
annoying when someone requests a list and then subscribes 40,000
people. (note: this is not a valid diff, needs to be applied by hand)

. add_Sender_header.diff - adds a Sender header to outgoing messages
produced by the server, enables DKIM signatures to work

. create_db.mysql.diff - Additions to the mysql table creation
necessary for the list caching diffs below

. cache-list-configs-5.3.3.diff - the following describes the changes
included in this patch

. modulo_verp.diff - fixes a weird crash where verp bounces causes bounced.pl 
to just die

. fix_re_re_re.diff - fixes subject header for the list no longer goes after the Re:, 
instead it gets placed before, which creates these silly long strings of Re:’s.

. sync_admin_table.diff - adds flag to sympa.pl to rebuild the admin_table (--sync_admin_table).
this rebuilds the admin_table using the code in the update script that creates the table in the 
first place. rebuilding the admin_table (a cache of all the admins for each list) basically involves 
reading the config files for each list and extracting their owners and editors, then stuffing them into admin_table.

changes which have been made to add caching of list configs in
a special database table.

TODO
===================

(1) allow --sync_db_list flag to take a specific list as an argument
(2) allow you to enable/disable the caching of list configs in the list_table
(3) should do_get_inactive_lists use a list_table? we did not include it in current patch
    seems like it won't help. ditto for rebuilding the archives


Changes to Lists.pm
===================

added:
  List::get_lists_db -- returns an array(?) of lists given a mysql statement.

  List::_update_list_db -- updates the cache database
  
changed: 
  List::get_lists
    what it does: 
	our changes: adds additional argument of preloaded lists. uses this instead of loading the lists
      itself. this preloaded array comes from the array via get_lists_db

  List::get_which 
    what it does: returns array of lists which meet certain criteria (eg subscriber is bob@riseup.net)
	our changes: get_which_db returns a hash of the listname's we care about. instead of then
	  looping through all lists (and loading each config!), we just loop through the list objects
	  of the lists indicated by our call to get_which_db. 
	
  List::save_config
    what it does: saves the config file for a list
	our changes: update the database whenever the config is saved
    + if ($List::use_db) {
    + 	unless (&_update_list_db) {
    +		&do_log('err', "Unable to update list_table");
    + 	}
    + }						  

Changes to sympa.pl
===================

added --sync_db_list command line argument.
  this will (re)build the config cache (list_table) by
  calling $list->_update_list_db for every single list.

+   --sync_db_list[=listname]             : sync lists on the filesystem with the database - optionally sync an individual list

-  'lang|l=s', 'mail|m', 'keepcopy|k=s', 'help', 'version', 'import=s','make_alias_file','lowercase',
+  'lang|l=s', 'mail|m', 'keepcopy|k=s', 'help', 'version', 'import=s','make_alias_file','lowercase', 'sync_db_list',

-  $main::options{'reload_list_config'}
+  $main::options{'reload_list_config'}||
+  $main::options{'sync_db_list'}

+elsif ($main::options{'sync_db_list'}) {
+       my $all_lists;
+               $all_lists = &List::get_lists('*');
+       foreach my $list (@$all_lists) {
+          $list->_update_list_db;
+       }
+       exit 0;
+}
+##########################################
 elsif ($main::options{'modify_list'}) {
 
Changes to wwsympa.fcgi
=======================


sub do_get_pending_lists:
-------------------------

- my $all_lists = &List::get_lists($robot);
+ my $statement = "SELECT name_list FROM list_table WHERE status_list = 'pending'";
+ my @lists = &List::get_lists_db($statement);
+ my $all_lists = &List::get_lists($robot, undef, @lists);

sub do_get_closed_lists
-----------------------

remove:
     my $all_lists = &List::get_lists($robot);

add:
     my $statement = "SELECT name_list FROM list_table WHERE status_list in ('closed' , 'family_closed')";
     my @lists = &List::get_lists_db($statement);
     my $all_lists = &List::get_lists($robot, undef, @lists);


sub do_get_inactive_lists (skipped)
-------------------------

-  my $all_lists = &List::get_lists($robot);
+ ## [XXX] TODO: Select only lists that are not closed
+ my $statement = sprintf "SELECT name_list FROM list_table WHERE status_list != 'closed'";
+ my @lists = &List::get_lists_db($statement);  
+ my $all_lists = &List::get_lists($robot, undef, \@lists);

sub do_search
----------------

add:
    my $regexp = $param->{'regexp'};                                                                                                       
    my $statement = sprintf "SELECT name_list FROM list_table WHERE name_list RLIKE '%s' OR subject_list RLIKE '%s'", $regexp, $regexp;    
    my @lists = &List::get_lists_db($statement) || undef;                                                                                  
    my $all_lists = &List::get_lists($robot,undef, @lists);                                                                                
						 
