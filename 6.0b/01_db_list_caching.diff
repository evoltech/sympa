Index: src/confdef.pm
===================================================================
--- src/confdef.pm	(revision 5739)
+++ src/confdef.pm	(working copy)
@@ -463,6 +463,11 @@
         default => 'mailer-daemon|sympa|listserv|majordomo|smartlist|mailman',
 	vhost   => '1',
     },
+    {
+        name    => 'cache_lists_db',
+        default => '0',
+        advice  => 'Whether or not to cache lists in the database',
+    },
     { title => 'Internationalization' },
     {
         name    => 'lang',
Index: src/List.pm
===================================================================
--- src/List.pm	(revision 5739)
+++ src/List.pm	(working copy)
@@ -1813,6 +1813,14 @@
 
 #    $self->{'mtime'}[0] = (stat("$list->{'dir'}/config"))[9];
     
+
+    # Update the list in the database
+    if ($List::use_db) {
+	unless (&_update_list_db) {
+	    &do_log('err', "Unable to update list_table");
+	}
+    }
+
     ## Release the lock
     unless ($lock->unlock()) {
 	return undef;
@@ -11466,6 +11474,122 @@
     return $self->{'name'}.'@'.$self->{'domain'};
 }
 
+####################################################################
+## Support for list config caching in database
+
+sub get_lists_db {
+    my $statement = shift;
+    return undef unless defined($statement);
+    do_log('info', 'List::get_search_list_db(%s)', $statement);
+
+    unless ($List::use_db) {
+	&do_log('info', 'Sympa not setup to use DBI');
+	return undef;
+    }
+    
+    my ($l, @lists);
+
+    ## Check database connection
+    unless ($dbh and $dbh->ping) {
+	return undef unless &db_connect();
+    }	   
+    push @sth_stack, $sth; 
+    &do_log('debug2','SQL: %s', $statement);
+    unless ($sth = $dbh->prepare($statement)) { 
+	&do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+	return undef;
+    } 
+    unless ($sth->execute) {
+	do_log('err','Unable to execute SQL statement "%s" : %s', $statement, $dbh->errstr); 
+	return undef;
+    } 
+    while ($l = $sth->fetchrow_hashref) {
+	my $name = $l->{'name_list'};
+	push @lists, $name;
+    }	
+    $sth->finish();
+    $sth = pop @sth_stack;
+
+    return \@lists;
+}
+
+sub _update_list_db
+{
+    my ($self) = shift;
+    my @admins;
+    my $i;
+    my $adm_txt;
+    my $ed_txt;
+    my $statement = sprintf "SELECT COUNT(*) FROM list_table WHERE name_list = %s AND robot_list = %s" , $dbh->quote($self->{'name'}), $dbh->quote($self->{'admin'}{'host'});  
+    unless ($sth = $dbh->prepare($statement)) {
+	do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+	return undef;
+    }
+    my $ret;
+    unless ($sth->execute) {
+	do_log('err',"Unable to execute SQL statement '%s' : %s", $statement, $dbh->errstr);
+	return undef;
+    }
+    
+    my $op = "UPDATE";
+    my $set = "";
+    my $ret = $sth->fetchrow_arrayref;
+    $sth->finish;
+    my $count = $ret->[0];
+    unless ($count > 0) {
+	$op = "INSERT INTO";
+	$set = "";
+    }
+
+    my $name = $self->{'name'};
+    my $subject = $self->{'admin'}{'subject'} || '';
+    my $status = $self->{'admin'}{'status'};
+    my $robot = $self->{'admin'}{'host'};
+    my $web_archive  = &is_web_archived($self) || 0; 
+    my $topics = '';
+    if ($self->{'admin'}{'topics'}) {
+	$topics = join(',',@{$self->{'admin'}{'topics'}});
+    }
+    
+    foreach $i (@{$self->{'admin'}{'owner'}}) {
+	if (ref($i->{'email'})) {
+	    push(@admins, @{$i->{'email'}});
+	} elsif ($i->{'email'}) {
+	    push(@admins, $i->{'email'});
+	}
+    }
+    $adm_txt = join(',',@admins) || '';
+
+    undef @admins;
+    foreach $i (@{$self->{'admin'}{'editor'}}) {
+	if (ref($i->{'email'})) {
+	    push(@admins, @{$i->{'email'}});
+	} elsif ($i->{'email'}) {
+	    push(@admins, $i->{'email'});
+	}
+    }
+    $ed_txt = join(',',@admins) || '';
+
+    my $statement = sprintf "%s `list_table` %s SET status_list= %s, name_list=%s, robot_list=%s, subject_list=%s, web_archive_list=%s, topics=%s, owners=%s, editors=%s ",
+	$op, $set, $dbh->quote($status), $dbh->quote($name), 
+    	$dbh->quote($robot), $dbh->quote($subject), 
+    	$dbh->quote($web_archive), $dbh->quote($topics),
+    	$dbh->quote($adm_txt),$dbh->quote($ed_txt);
+
+    if ($op eq "UPDATE") {
+	$statement .= sprintf " WHERE robot_list = %s AND name_list = %s ", $dbh->quote($robot), $dbh->quote($name); 
+    }
+
+    unless ($sth = $dbh->prepare($statement)) {
+	do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+	return undef;
+    }
+    unless ($sth->execute) {
+	do_log('err','Unable to execute SQL statement "%s" : %s', $statement, $dbh->errstr);
+    }
+    return 1;
+}
+
 ###### END of the List package ######
 
 ## This package handles Sympa virtual robots
Index: src/Upgrade.pm
===================================================================
--- src/Upgrade.pm	(revision 5739)
+++ src/Upgrade.pm	(working copy)
@@ -753,7 +753,18 @@
 						       'lock_bulkspool' => 'int(1)'},
 				 'conf_table' => {'robot_conf' => 'varchar(80)',
 						  'label_conf' => 'varchar(80)',
-						  'value_conf' => 'varchar(300)'}
+						  'value_conf' => 'varchar(300)'},
+                 'lists_table' => {'name_list'=>'varchar(100)',
+                                   'path_list'=>'varchar(100)',
+                                   'robot_list'=>'varchar(100)',
+                                   'status_list'=>"enum('open','closed','pending','error_config','family_closed')",
+                                   'creation_email_list'=>'varchar(100)',
+                                   'creation_epoch_list'=>'datetime',
+                                   'subject_list'=>'varchar(100)',
+                                   'web_archive_list'=>'tinyint(1)',
+                                   'topics_list'=>'varchar(100)',
+                                   'editors_list'=>'varchar(100)',
+                                   'owners_list'=>'varchar(100)'}
 			     },
 		     'SQLite' => {'user_table' => {'email_user' => 'varchar(100)',
 						   'gecos_user' => 'varchar(150)',
@@ -844,7 +855,19 @@
 							'lock_bulkspool' => 'integer'},
 				  'conf_table' => {'robot_conf' => 'varchar(80)',
 						   'label_conf' => 'varchar(80)',
-						   'value_conf' => 'varchar(300)'}
+						   'value_conf' => 'varchar(300)'},
+                  'lists_table' => {'name_list'=>'varchar(100)',
+                           'path_list'=>'varchar(100)',
+                           'robot_list'=>'varchar(100)',
+                           'status_list'=>"enum('open','closed','pending','error_config','family_closed')",
+                           'creation_email_list'=>'varchar(100)',
+                           'creation_epoch_list'=>'datetime',
+                           'subject_list'=>'varchar(100)',
+                           'web_archive_list'=>'tinyint(1)',
+                           'topics_list'=>'varchar(100)',
+                           'editors_list'=>'varchar(100)',
+                           'owners_list'=>'varchar(100)'},
+
 			      },
 		     );
     
@@ -872,6 +895,16 @@
 		    'messagekey_bulkmailer' => 1,
 		    'packetid_bulkmailer' => 1,
 		    'messagekey_bulkspool' => 1,
+            'name_list'=>1,
+            'path_list'=>1,
+            'robot_list'=>1,
+            'status_list'=>1,
+            'creation_email_list'=>1,
+            'subject_list'=>1,
+            'web_archive_list'=>1,
+            'topics_list'=>1,
+            'owners_list'=>1,
+            'editors_list'=>1
 		    );
     
     my %primary = ('user_table' => ['email_user'],
@@ -883,7 +916,8 @@
 		   'one_time_ticket_table' => ['ticket_one_time_ticket'],
 		   'bulkmailer_table' => ['messagekey_bulkmailer','packetid_bulkmailer'],
 		   'bulkspool_table' => ['messagekey_bulkspool'],
-		   'conf_table' => ['robot_conf','label_conf']
+		   'conf_table' => ['robot_conf','label_conf'],
+           'list_table'=> ['name_list','robot_list']
 		   );
 
     ## List the required INDEXES
Index: src/sympa.pl
===================================================================
--- src/sympa.pl	(revision 5739)
+++ src/sympa.pl	(working copy)
@@ -85,6 +85,8 @@
    --dump=list\@dom|ALL                  : dumps subscribers 
    --make_alias_file                     : create file in /tmp with all aliases (usefull when aliases.tpl is changed)
    --lowercase                           : lowercase email addresses in database
+   --sync_db_list[=listname]             : syncs filesystem list configs to the database cache of list configs,
+                                           optionally sync an individual list if specified.
    --md5_encode_password                 : rewrite password in database using md5 fingerprint. YOU CAN'T UNDO unless you save this table first
    --create_list --robot=robot_name --input_file=/path/to/file.xml 
                                          : create a list with the xml file under robot_name
@@ -123,7 +125,7 @@
 ## Check --dump option
 my %options;
 unless (&GetOptions(\%main::options, 'dump=s', 'debug|d', ,'log_level=s','foreground', 'service=s','config|f=s', 
-		    'lang|l=s', 'mail|m', 'keepcopy|k=s', 'help', 'version', 'import=s','make_alias_file','lowercase','md5_encode_password',
+		    'lang|l=s', 'mail|m', 'keepcopy|k=s', 'help', 'version', 'import=s','make_alias_file','lowercase','sync_db_list','md5_encode_password',
 		    'close_list=s','purge_list=s','create_list','instantiate_family=s','robot=s','add_list=s','modify_list=s','close_family=s','md5_digest=s',
 		    'input_file=s','sync_include=s','upgrade','from=s','to=s','reload_list_config','list=s','quiet','close_unknown','test_database_message_buffer')) {
     &fatal_err("Unknown options.");
@@ -151,7 +153,8 @@
 				$main::options{'sync_include'} ||
 				$main::options{'upgrade'} ||
 				$main::options{'test_database_message_buffer'} || 
-				$main::options{'reload_list_config'}
+				$main::options{'reload_list_config'} ||
+                $main::options{'sync_db_list'}
 				 );
 
 # Some option force foreground mode
@@ -831,7 +834,35 @@
     exit 0;
 }
  
+##########################################
+elsif ($main::options{'sync_db_list'}) {	
+    unless ($Conf{'db_list_cache'}) {
+	print STDOUT "\nSympa not configured to use database list caching \n";
+	exit 1;
+    }
+    my $listname = $main::options{'sync_db_list'};
+    if (length($listname) > 1) {
+    	my ($listname, $robot) = split /\@/, $listname;
+        my $list = new List ($listname, $robot); 
+	unless (defined $list) {
+	    print STDOUT "\nList '$list' does not exist. \n";
+	    exit 1;
+	}
+        if (&List::_flush_list_db($listname)) {	
+	    $list->update_list_db;
+	}
+    } else {
+        &List::_flush_list_db();
+        my $all_lists = &List::get_lists('*');
+        foreach my $list (@$all_lists) {
+	    $list->_update_list_db;
+        }
+    }
+    exit 0;
+}
+ 
 
+
 ## Do we have right access in the directory
 if ($main::options{'keepcopy'}) {
     if (! -d $main::options{'keepcopy'}) {
Index: src/Conf.pm
===================================================================
--- src/Conf.pm	(revision 5739)
+++ src/Conf.pm	(working copy)
@@ -192,6 +192,9 @@
     unless (defined $o{'tmpdir'}) {
 	$o{'tmpdir'}[0] = "$spool/tmp";
     }    
+    unless (defined $o{'cache_lists_db'}){
+    $o{'cache_lists_db'}[0] = 0;
+    }
 
     ## Check if we have unknown values.
     foreach $i (sort keys %o) {
Index: src/etc/script/create_db.Sybase
===================================================================
--- src/etc/script/create_db.Sybase	(revision 5739)
+++ src/etc/script/create_db.Sybase	(working copy)
@@ -189,3 +189,23 @@
 
 create index messagekey_bulkspool_fk on bulkspool_table (messagekey_bulkspool)
 go
+
+CREATE TABLE list_table (
+    name_list varchar(100) NOT NULL,
+    path_list varchar(100) NOT NULL,
+    robot_list varchar(100) NOT NULL,
+    status_list enum('open','closed','pending','error_config','family_closed') NOT NULL,
+    creation_email_list varchar(100) NOT NULL,
+    creation_epoch_list datetime ,
+    subject_list varchar(100) NOT NULL,
+    web_archive_list tinyint(1) NOT NULL,
+    topics_list varchar(100) NOT NULL,
+    editors_list varchar(100) NOT NULL,
+    owners_list varchar(100) NOT NULL,
+    CONSTRAINT ind_list PRIMARY KEY  (name_list,robot_list)
+)
+go
+
+CREATE INDEX id_list_fk ON list_table(name_list, robot_list)
+go
+
Index: src/etc/script/create_db.SQLite
===================================================================
--- src/etc/script/create_db.SQLite	(revision 5739)
+++ src/etc/script/create_db.SQLite	(working copy)
@@ -136,4 +136,21 @@
   value_conf varchar(300)
 );
 
-CREATE INDEX robot_conf_idx ON conf_table(robot_conf,label_conf);
\ No newline at end of file
+CREATE INDEX robot_conf_idx ON conf_table(robot_conf,label_conf);
+
+CREATE TABLE list_table (
+    name_list varchar(100) NOT NULL,
+    path_list varchar(100) NOT NULL,
+    robot_list varchar(100) NOT NULL,
+    status_list enum('open','closed','pending','error_config','family_closed') NOT NULL,
+    creation_email_list varchar(100) NOT NULL,
+    creation_epoch_list datetime ,
+    subject_list varchar(100) NOT NULL,
+    web_archive_list tinyint(1) NOT NULL,
+    topics_list varchar(100) NOT NULL,
+    owners_list varchar(100) NOT NULL,
+    editors_list varchar(100) NOT NULL,
+    CONSTRAINT ind_list PRIMARY KEY  (name_list,robot_list)
+);
+CREATE INDEX list_idx ON list_table(name_list, robot_list);
+
Index: src/etc/script/create_db.mysql
===================================================================
--- src/etc/script/create_db.mysql	(revision 5739)
+++ src/etc/script/create_db.mysql	(working copy)
@@ -136,3 +136,19 @@
   value_conf varchar(300) default NULL
   PRIMARY KEY (robot_conf,label_conf)
 );
+
+CREATE TABLE list_table (
+    name_list varchar(100) NOT NULL default '',
+    path_list varchar(100) NOT NULL default '',
+    robot_list varchar(100) NOT NULL default '',
+    status_list enum('open','closed','pending','error_config','family_closed') NOT NULL default 'closed',
+    creation_email_list varchar(100) NOT NULL default '',
+    creation_epoch_list datetime default NULL,
+    subject_list varchar(100) NOT NULL default '',
+    web_archive_list tinyint(1) NOT NULL default '0',
+    topics_list varchar(100) NOT NULL default '',
+    editors_list varchar(100) NOT NULL default '',
+    owners_list varchar(100) NOT NULL default '',
+    PRIMARY KEY  (name_list,robot_list)
+);
+
Index: src/etc/script/create_db.Oracle
===================================================================
--- src/etc/script/create_db.Oracle	(revision 5739)
+++ src/etc/script/create_db.Oracle	(working copy)
@@ -144,4 +144,20 @@
   CONSTRAINT ind_conf primary key (robot_conf,label_conf)
 );
 
+CREATE TABLE list_table (
+    name_list varchar(100) NOT NULL,
+    path_list varchar(100) NOT NULL,
+    robot_list varchar(100) NOT NULL,
+    status_list enum('open','closed','pending','error_config','family_closed') NOT NULL,
+    creation_email_list varchar(100) NOT NULL,
+    creation_epoch_list datetime ,
+    subject_list varchar(100) NOT NULL,
+    web_archive_list tinyint(1) NOT NULL,
+    topics_list varchar(100) NOT NULL,
+    editors_list varchar(100) NOT NULL,
+    owners_list varchar(100) NOT NULL,
+    CONSTRAINT ind_list PRIMARY KEY  (name_list,robot_list)
+);
+
+
 !
Index: src/etc/script/create_db.Pg
===================================================================
--- src/etc/script/create_db.Pg	(revision 5739)
+++ src/etc/script/create_db.Pg	(working copy)
@@ -156,4 +156,22 @@
   value_conf varchar(300),
   constraint ind_conf primary key (robot_conf,label_conf)
 );
-CREATE INDEX robot_conf_idx ON conf_table(robot_conf,label_conf);
\ No newline at end of file
+CREATE INDEX robot_conf_idx ON conf_table(robot_conf,label_conf);
+
+DROP TABLE list_table;
+CREATE TABLE list_table (
+    name_list varchar(100) NOT NULL,
+    path_list varchar(100) NOT NULL,
+    robot_list varchar(100) NOT NULL,
+    status_list enum('open','closed','pending','error_config','family_closed') NOT NULL,
+    creation_email_list varchar(100) NOT NULL,
+    creation_epoch_list datetime ,
+    subject_list varchar(100) NOT NULL,
+    web_archive_list tinyint(1) NOT NULL,
+    topics_list varchar(100) NOT NULL,
+    owners_list varchar(100) NOT NULL,
+    editors_list varchar(100) NOT NULL,
+    CONSTRAINT ind_list PRIMARY KEY  (name_list,robot_list)
+);
+CREATE INDEX list_idx ON list_table(name_list, robot_list);
+
Index: wwsympa/wwsympa.fcgi
===================================================================
--- wwsympa/wwsympa.fcgi	(revision 5739)
+++ wwsympa/wwsympa.fcgi	(working copy)
@@ -7705,8 +7705,14 @@
 
      ## Checking families and other virtual hosts.
      &get_server_details();
+     my @lists;
 
-     my $all_lists = &List::get_lists($robot);
+     if ($Conf{'cache_lists_db'}){
+        my $statement = "SELECT name_list FROM list_table WHERE status_list = 'pending'";
+        @lists = &List::get_lists_db($statement);
+     }
+
+     my $all_lists = &List::get_lists($robot, undef, @lists);
      foreach my $list ( @$all_lists ) {
 	 if ($list->{'admin'}{'status'} eq 'pending') {
 	     $param->{'pending'}{$list->{'name'}}{'subject'} = $list->{'admin'}{'subject'};
@@ -7726,7 +7732,14 @@
      ## Checking families and other virtual hosts.
      &get_server_details();
 
-     my $all_lists = &List::get_lists($robot);
+     my @lists;
+     if ($Conf{'cache_lists_db'}){
+        
+        my $statement = "SELECT name_list FROM list_table WHERE status_list in ('closed' , 'family_closed')";
+        my @lists = &List::get_lists_db($statement);
+     }
+
+     my $all_lists = &List::get_lists($robot, undef, @lists);
      foreach my $list ( @$all_lists ) {
 	 if ($list->{'admin'}{'status'} eq 'closed' ||
 	     $list->{'admin'}{'status'} eq 'family_closed') {
@@ -7745,11 +7758,10 @@
 
      ## Checking families and other virtual hosts.
      &get_server_details();
+     my @unordered_lists;
 
-     my @unordered_lists;
      my $all_lists = &List::get_lists($robot);
      foreach my $list ( @$all_lists ) {
-
 	 push @unordered_lists, {'name' => $list->{'name'},
 				 'subject' => $list->{'admin'}{'subject'},
 				 'creation_date' => $list->{'admin'}{'creation'}{'date_epoch'}};
@@ -8633,7 +8645,17 @@
 
      ## Members list
      my $record = 0;
-     my $all_lists = &List::get_lists($robot);
+
+     my @lists;
+
+     # Search the database if available
+     if ($Conf{'cache_lists_db'}){
+        my $regexp = $param->{'regexp'};         
+        my $statement = sprintf "SELECT name_list FROM list_table WHERE name_list RLIKE '%s' OR subject_list RLIKE '%s'", $regexp, $regexp;    
+        @lists = &List::get_lists_db($statement) || undef;
+     }
+     my $all_lists = &List::get_lists($robot,undef, @lists);
+
      foreach my $list ( @$all_lists ) {
 	 my $is_admin;
 	 ## Search filter
