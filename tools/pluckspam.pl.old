#!/usr/bin/perl

##############################################
# pluckspam.pl - rhymes with what?
#     process spam complaints
#
# usage: pluckaol.pl <an aol spam complaint email>
#
# Status
# 1) find list name - done
# 2) find user's email address - done
# 3) unsubscribe user - TODO: not done
#   a) record complainer - done
# 4) record complaint against list - done
# 5) return error code. 0 == action required, >0 == action taken
#
################################################

use strict;

my ($re_list_header, $re_reminder_mailto, $re_reminder_subject, $re_welcome_subject, $re_welcome_email, $re_subscribe_subject, $re_spam_report_subject);
my ($log, $line, $subject, $listmatch, $emailmatch);
my ($complainer, $list, $complaints, $complainers, $result_code, $remove_user_string);
my (@sortedlines);
my $tempsubject;		# a regretable hack

################################################

# configuration

my $debug = 0;

# filenames
$complaints = "list_complaints";
$log = "spam_complaint_log";

$complainers = "complainers";		# currently unused


# regular expressions

$re_list_header = 'List-Post\:\s\<mailto\:([A-Z0-9._%-]+)@[A-Z0-9._%-]+\.[A-Z]{2,4}\>\s*$';
$re_reminder_subject = '^Subject\: subscription reminder: (.*)\s*$';
$re_welcome_subject = '^Subject\: Welcome (?:is|in) list (.*)\s*$';
$re_subscribe_subject = '^Subject\: auth (?:\w)* subscribe (.*)\s*$';

$re_reminder_mailto = '^\s*mailto:[A-Z0-9._%-]+\@[A-Z0-9._%-]+\.[A-Z]{2,4}\?subject\=sig\%20[A-Z0-9._%-]+\%20([A-Z0-9._%-]+\@[A-Z0-9._%-]+\.[A-Z]{2,4})\s*$';
$re_welcome_email = '^Your subscription email is ([A-Z0-9._%-]+\@[A-Z0-9._%-]+\.[A-Z]{2,4})\s*$';

# don't use () in this regex to return a substring
$re_spam_report_subject = '^Subject\: Client TOS Notification\s*$';

################################################

# initialize some variables
$listmatch = 0;
$emailmatch = 0;
$complainer = "";
$list = "";
$subject = "";
$tempsubject = "";

################################################

sub update_complaints {

    # subroutine accepts one list name as a parameter
    my $list = shift;
	
	for ($list) {
    	s/^\s+//;
    	s/\s+$//;
   	}
	
    my $count = 0;
    my ($line, @lines);

    # read complaint tally file
	if (-e $complaints) {
	    open(C, $complaints) 	or print LOG "**** Unable to open $complaints for reading: $!" && die;
		flock(C, 1)				or print LOG "**** Unable to shared-read lock $complaints: $!" && die;
	    while(<C>) {
	        push @lines, $_;
	    }
	    close(C);
	}

	# sort tally file
	@sortedlines = sort { $b <=> $a } @lines;

	# write complaints tally file
    open(COMPLAINTS, "> $complaints") or print "**** Unable to open $complaints for writing: $!" && die;
	flock(COMPLAINTS, 2)		or print LOG "**** Unable to exclusive-write lock $complaints: $!" && die;
    foreach $line (@sortedlines) {
        if ($line =~ /^(\d+)\s$list\s*$/) {

            # get current tally
            $count = $1;

            # overwrite, with incremented tally
            print COMPLAINTS ++$count .  " " . $list . "\n";

        } else {
            # write unmodified line back into file
            print COMPLAINTS $line;
        }
    }
    if ($count < 1) {
        # did not find listname in tally file
        print COMPLAINTS ++$count .  " " . $list . "\n";
    }
    close(COMPLAINTS);
}

################################################

################################################

sub update_complainers {

    # subroutine accepts one email address as a parameter
    my $email = shift;
	for ($email) {
    	s/^\s+//;
    	s/\s+$//;
   	}

    my ($line, @lines);
	my $writeflag = 0;

    # read complainer file
	if (-e $complainers) {
	    open(C, $complainers) 	or print LOG "**** Unable to open $complainers for reading: $!" && die;
		flock(C, 1)				or print LOG "**** Unable to shared-read lock $complainers: $!" && die;
	    while(<C>) {
	        push @lines, $_;
	    }
	    close(C);
	}

	# write complainers file
    open(COMPLAINERS, "> $complainers") or print "**** Unable to open $complainers for writing: $!" && die;
	flock(COMPLAINERS, 2)		or print LOG "**** Unable to exclusive-write lock $complainers: $!" && die;
    foreach $line (@lines) {
        if ($line =~ /^$email\s*$/) {

            # overwrite to prevent duplicate entries
            print COMPLAINERS "$email\n";
			$writeflag++;
        } else {
	        # write unmodified line back into file
	        print COMPLAINERS $line;
		}		
    }
	if ($writeflag == 0) {
		# write new complainer
		print COMPLAINERS "$email\n";
    }
    close(COMPLAINERS);
}

################################################



###############################################
###############################################

# begin 

################################################

open(LOG,">>$log")	or print LOG "**** Unable to open $log for append: $!\n" && die;
flock(LOG, 2) 		or print LOG "**** Unable to exclusive-write lock $log: $!";  # don't die

# read in email messaage
LINE: while(<STDIN>){

	goto ENDINPUT if $listmatch + $emailmatch == 3;

	if ($_ =~ /^Subject\:\s(.*)\s*$/i) {
		
		# this is subject header
		$tempsubject = $1;

		# quit if first subject header is not a spam report
		if (length($subject) == 0 && $_ !~ /$re_spam_report_subject/) {
			
			# probably not an AOL spam complaint email
			$subject = $tempsubject;
			print LOG "**** Ignored $subject";
			goto ENDINPUT;

		} else {

		# set subject header for logfile
		$subject = $tempsubject; 
		$tempsubject = "";

		}
	}
	
	# test for listname
	goto EMAIL if $listmatch == 1;
	if (
		$_ =~ /$re_list_header/i || 
		$_ =~ /$re_welcome_subject/i || 
		$_ =~ /$re_reminder_subject/i ||
		$_ =~ /$re_subscribe_subject/i
		) {

		# reg expressions should reference list with $1
		$list = $1;
		$listmatch = 1;
	}

EMAIL: next LINE if $emailmatch == 2;
	# test for reminder email
	if ($_ =~ /$re_reminder_mailto/i || $_ =~ /$re_welcome_email/i) {

		# reg expressions should reference email with $1
		$complainer = $1;
		$emailmatch = 2;
	}
}

if ($emailmatch + $listmatch < 1) {
	print LOG "$subject\n";
}

ENDINPUT: print STDERR "E:$complainer L:$list S:" . substr($subject, 0, 30) . "\n" if $debug;

# listmatch = 1, emailmatch = 2, both = 3
$result_code = eval($emailmatch + $listmatch);

if ($result_code == 1) {
	# found a list
	update_complaints($list);
}

if ($result_code == 2) {
	# found a complainer
	update_complainers($complainer);

	# $remove_user_string = 'bash /home/sympa/tools/remove_user ' . $complainer . ' ALL';
	# system $remove_user_string;
}

if ($result_code == 3) {
	# found both a complainer and a list
	$remove_user_string = 'bash /home/sympa/tools/remove_user ' . $complainer . ' ' .  $list;
	system $remove_user_string;

	# update_complainers($complainer);
	# update_complaints($list);
}

close(LOG);

# STDOUT return value for match: 0 none, 1 list, 2 user, 3 list and user
print $result_code;