#!/usr/bin/perl -w
# topdomains - list the top 25 domains by user count,
#  also lists the total users and unique domains
# NOTE: this script doesn't check the validity of addresses or domains
#  so the count might include them if those haven't been cleaned up
# NOTE: this script requires the current user has read access to the db

use vars qw($rundump %domains %count $key $percent);

$rundump='mysql --batch --database=sympa --skip-column-names --execute \
  "select email_user from user_table"';

open(LIST,"$rundump|") or die "Cannot get addresses from sympa db\n";

while (<LIST>) {
   # because we have bogus addresses, this regex doesn't always match, so if it
   if ( m/@(.*)>?$/ ) {
      $domains{$1}++;
      $count++;
   };
}

$dcount = scalar keys %domains;


format Plain =
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<... @>>>>>>> (@#.##%)
$key,                                                   $domains{$key}, $percent
.

format Html =
<tr><td>@*</td><td align=right>@*</td><td align=right>@#.##%</td>
        $key,      $domains{$key}, $percent
.

if ( $ARGV[0] eq '-h' ) {
   $~='Html';
   print "<style>table{border: 1px solid;border-collapse: collapse;}\ntd,th{border-width: 1px 1px 1px 1px;border-style: solid;}\n</style>\n";
   print "<h3>Top 25 domains by users</h3>\n";
   print "Total users: ".$count." Total domains: ". $dcount ."<br>\n";
   print "(<i>generated ".`date`."</i>)<br>\n";
   print "<table>\n";
   print "<tr><th align=center>Domain</th><th align=center>Users</th><th>\% of total</th></tr>\n";
} else {
   print "Top 25 domains by users\n";
   print "Total users: ".$count." Total domains: ". $dcount ."\n";
   print "(generated ".`date`.")\n";
   print "Domain:                                                    Users (\% of total)\n";
   $~='Plain';
}

foreach $key ((sort { $domains{$b} <=> $domains{$a} } keys %domains)[0..24]) {
   $percent=$domains{$key}/$count*100;
   write;
}

if ( $ARGV[0] eq '-h' ) {
   print "</table>\n";
}

