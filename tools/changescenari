#!/usr/bin/perl -w
# changescenari - do a search and replace on every config file.
# edit the $listdir and $replacesments to configure
# originally by elijah in php4
# rewritten in perl by taggart 2012-02

use Getopt::Std;
$Getopt::Std::STANDARD_HELP_VERSION="true";

use vars qw($opt_d);
use vars qw($opt_l);

getopts('dl:');

sub HELP_MESSAGE {
  print "Usage: changescenari [-d] [-l <listname>]\n";
  print "     -d  : actually change things\n";
  print "     -l  : specify list to change\n";
  print "BE CAREFUL! Run without -d and review what it will do first!\n";
}

my $listdir='/home/sympa/expl/';
my $tmpdir='/home/sympa/tmp';

# create hash of replacements
%replacements = (
# below are DONE
	'send newsletter_verify' => 'send editors_moderated',
	'send newsletter_verify_others' => 'send editors_moderated',
	'send newsletter' => 'send editors_unmoderated',
	'send newsletterkeyonly' => 'send editors_moderated',
	'send editorkey' => 'send editors_or_moderated',
	'send editorkeyonly' => 'send anyone_moderated',
	'send editorkeyonlyauth' => 'send anyone_moderated_verified',
	'send private' => 'send members_unmoderated',
	'send privatekey' => 'send members_unmoderated_verified',
	'send privateorpublickey' => 'send members_or_verified',
	'send privateandeditorkey' => 'send members_moderated',
	'send privatekeyandeditorkeyonly' => 'send members_moderated_verified',
	'send privateoreditorkey' => 'send members_or_moderated',
	'send public' => 'send anyone_unmoderated',
	'send publickey' => 'send anyone_unmoderated_verified',
	'send intranet' => 'send members_unmoderated',
	'send intranetorprivate' => 'send members_unmoderated',
	'send privateandnomultipartoreditorkey' => 'send members_moderated',
	'send private_smime' => 'send members_moderated',
	'send publicnoattachment' => 'send members_unmoderated',
	'send public_nobcc' => 'send members_unmoderated',
	'send publicnomultipart' => 'send members_moderated',
	'review owner' => 'review owners',
	'review private' => 'review members',
	'review intranet' => 'review owners',
	'review public' => 'review members',
	'\nvisibility conceal' => "\nvisibility members",
	'\nvisibility noconceal' => "\nvisibility anyone",
	'\nvisibility secret' => "\nvisibility members",
	'\nvisibility intranet' => "\nvisibility members",
	'info open' => 'info anyone',
	'info private' => 'info members',
	#'access public' => 'access anyone',
	#'access private' => 'access members',
	#'access owner' => 'access owners',
	'd_read owner' => 'd_read owners',
	'd_read public' => 'd_read anyone',
	'd_read private' => 'd_read members',
	'd_read private-https' => 'd_read members',
	'd_edit editor' => 'd_edit editors',
	'd_edit owner' => 'd_edit owners',
	'd_edit public' => 'd_edit members',
	'd_edit private' => 'd_edit members',
	'd_edit private-https' => 'd_edit members',
	'del auth' => 'del verified',
	'del owner' => 'del verified',
	'del owner_notify' => 'del verified_notify',
	'add auth' => 'add verified',
	'add owner' => 'add verified',
	'add owner_notify' => 'add verified_notify',
	'invite default' => 'invite closed',
	'invite public' => 'invite anyone',
	'invite owner' => 'invite owners',
	'invite private' => 'invite members',
	'invite impossible' => 'invite closed',
	'subscribe open' => 'subscribe verified',
	'subscribe open_notify' => 'subscribe verified_notify',
	'subscribe open_quiet' => 'subscribe verified',
	'subscribe auth' => 'subscribe verified',
	'subscribe auth_notify' => 'subscribe verified_notify',
	'subscribe auth_owner' => 'subscribe verified_approved',
	'subscribe approved' => 'subscribe verified_approved',
	'subscribe approved_verified' => 'subscribe verified_approved',
	'subscribe intranet' => 'subscribe verified',
	'subscribe intranetorowner' => 'subscribe verified_approved',
	'subscribe anyone_notify' => 'subscribe verified_notify',
	'subscribe impossible' => 'subscribe closed',
	'subscribe smime' => 'subscribe verified',
	'subscribe smimeorowner' => 'subscribe verified_approved',
	'subscribe owner' => 'subscribe verified_approved',
	'unsubscribe open' => 'unsubscribe anyone',
	'unsubscribe open_notify' => 'unsubscribe anyone_notify',
	'unsubscribe notify' => 'unsubscribe anyone_notify',
	'unsubscribe auth' => 'unsubscribe verified',
	'unsubscribe auth_notify' => 'unsubscribe verified_notify'
);

if ($opt_l) {
  @configs = ("$listdir/$opt_l/config");
}else {
  # get list of configs
  $output=qx(find $listdir -name config);

  @configs = split /\n/,$output;
}

foreach $config (@configs) {

  $list=$config;
  $list =~ s:^.*/(.*?)/config:$1:;

  local $/ = undef;
  open(OLD,"$config") || die "ERROR: cannot open $config\n";
  $config_text = <OLD>;
  close OLD;

  # we're not going to make a new version until we have a reason to
  $newversion = 0;

  foreach $line (keys %replacements) {
    if ($config_text =~ /\n$line\n/) {
      print "NOTE: found '$line' in $list\n";
      print "  replacing with '$replacements{$line}'\n";
      # we're creating a new config file
      $newversion = 1;
      $config_text =~ s/\n$line\n/\n$replacements{$line}\n/;
    }
  }  

  # only do it if the user specified -d
  if ($opt_d) {
    if ($newversion) {
      # write the new version to a temp file
      die "ERROR: $config.new exists!\n" if ( -e "$config.new" );
      open(NEW,">$config.new") || die "ERROR: cannot open $config.new\n";
      print NEW $config_text;
      close NEW;
      # move it in place
      rename "$config.new", $config || die "ERROR: cannot move $config.new into place\n";
      # tell sympa to update the config.bin for the list
      #qx(/home/sympa/bin/sympa.pl --reload_list_config --list=$list@lists.riseup.net)
    }
  }
}

if (! $opt_d and $newversion) {
    print "WARNING: didn't actually make any changes. Review the above and when you\n";
    print "  are ready to run for real add the -d flag\n";
}

# changing scenari shouldn't update anything in the list table, but if you
#  need to sync use this
#/home/sympa/bin/sympa.pl --sync_list_db
