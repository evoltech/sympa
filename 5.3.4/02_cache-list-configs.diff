Index: src/List.pm
===================================================================
--- src/List.pm	(revision 4540)
+++ src/List.pm	(working copy)
@@ -1706,6 +1706,12 @@
 	return undef;
     }
 
+    if ($List::use_db) {
+	unless (&_update_list_db) {
+	    &do_log('err', "Unable to update list_table");
+	}
+    }
+    
     return 1;
 }
 
@@ -10239,7 +10245,8 @@
 sub get_lists {
     my $robot_context = shift || '*';
     my $options = shift;
-
+    my $userlists = shift;
+	
     my(@lists, $l,@robots);
     do_log('debug2', 'List::get_lists(%s)',$robot_context);
 
@@ -10263,7 +10270,18 @@
 	    do_log('err',"Unable to open $robot_dir");
 	    return undef;
 	}
-	foreach my $l (sort readdir(DIR)) {
+	my (@files, $len);
+	if ( defined($userlists)){
+	    @files = sort @$userlists;
+	    $len = @files+0;
+	    &do_log('debug2', "we are using $len directories");
+	}
+	else {
+	    @files = sort readdir(DIR);
+	    $len = @files+0;
+	    &do_log('debug2', "we are using $len directories");
+	}
+	foreach my $l (@files) {
 	    next if (($l =~ /^\./o) || (! -d "$robot_dir/$l") || (! -f "$robot_dir/$l/config"));
 
 	    my $list = new List ($l, $robot, $options);
@@ -10469,12 +10487,25 @@
 
     ## WHICH in Database
     my $db_which = {};
-
+    my $all_lists; 
+    
     if (defined $Conf{'db_type'} && $List::use_db) {
-	$db_which = &get_which_db($email,  $function);
+	$db_which = &get_which_db($email, $function);
+	# limit $all_lists to only the ones returned by get_which_db
+	my @lists;
+        foreach my $r (keys %{$db_which}){
+            foreach my $l (keys %{$db_which->{$r}}){
+               &do_log('debug2', "\$l is $l");  
+               push @lists, $l;
+            }
+        }
+        $all_lists = &get_lists($robot, undef, \@lists);
     }
+        
+    unless (defined($all_lists)) {
+	$all_lists = &get_lists($robot);
+    }
 
-    my $all_lists = &get_lists($robot);
     foreach my $list (@$all_lists){
  
 	my $l = $list->{'name'};
@@ -12504,6 +12534,122 @@
     return $self->{'name'}.'@'.$self->{'domain'};
 }
 
+####################################################################
+## Support for list config caching in database
+
+sub get_lists_db {
+    my $statement = shift;
+    return undef unless defined($statement);
+    do_log('info', 'List::get_search_list_db(%s)', $statement);
+
+    unless ($List::use_db) {
+	&do_log('info', 'Sympa not setup to use DBI');
+	return undef;
+    }
+    
+    my ($l, @lists);
+
+    ## Check database connection
+    unless ($dbh and $dbh->ping) {
+	return undef unless &db_connect();
+    }	   
+    push @sth_stack, $sth; 
+    &do_log('debug2','SQL: %s', $statement);
+    unless ($sth = $dbh->prepare($statement)) { 
+	&do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+	return undef;
+    } 
+    unless ($sth->execute) {
+	do_log('err','Unable to execute SQL statement "%s" : %s', $statement, $dbh->errstr); 
+	return undef;
+    } 
+    while ($l = $sth->fetchrow_hashref) {
+	my $name = $l->{'name_list'};
+	push @lists, $name;
+    }	
+    $sth->finish();
+    $sth = pop @sth_stack;
+
+    return \@lists;
+}
+
+sub _update_list_db
+{
+    my ($self) = shift;
+    my @admins;
+    my $i;
+    my $adm_txt;
+    my $ed_txt;
+    my $statement = sprintf "SELECT COUNT(*) FROM list_table WHERE name_list = %s AND robot_list = %s" , $dbh->quote($self->{'name'}), $dbh->quote($self->{'admin'}{'host'});  
+    unless ($sth = $dbh->prepare($statement)) {
+	do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+	return undef;
+    }
+    my $ret;
+    unless ($sth->execute) {
+	do_log('err',"Unable to execute SQL statement '%s' : %s", $statement, $dbh->errstr);
+	return undef;
+    }
+    
+    my $op = "UPDATE";
+    my $set = "";
+    my $ret = $sth->fetchrow_arrayref;
+    $sth->finish;
+    my $count = $ret->[0];
+    unless ($count > 0) {
+	$op = "INSERT INTO";
+	$set = "";
+    }
+
+    my $name = $self->{'name'};
+    my $subject = $self->{'admin'}{'subject'} || '';
+    my $status = $self->{'admin'}{'status'};
+    my $robot = $self->{'admin'}{'host'};
+    my $web_archive  = &is_web_archived($self) || 0; 
+    my $topics = '';
+    if ($self->{'admin'}{'topics'}) {
+	$topics = join(',',@{$self->{'admin'}{'topics'}});
+    }
+    
+    foreach $i (@{$self->{'admin'}{'owner'}}) {
+	if (ref($i->{'email'})) {
+	    push(@admins, @{$i->{'email'}});
+	} elsif ($i->{'email'}) {
+	    push(@admins, $i->{'email'});
+	}
+    }
+    $adm_txt = join(',',@admins) || '';
+
+    undef @admins;
+    foreach $i (@{$self->{'admin'}{'editor'}}) {
+	if (ref($i->{'email'})) {
+	    push(@admins, @{$i->{'email'}});
+	} elsif ($i->{'email'}) {
+	    push(@admins, $i->{'email'});
+	}
+    }
+    $ed_txt = join(',',@admins) || '';
+
+    my $statement = sprintf "%s `list_table` %s SET status_list= %s, name_list=%s, robot_list=%s, subject_list=%s, web_archive_list=%s, topics=%s, owners=%s, editors=%s ",
+	$op, $set, $dbh->quote($status), $dbh->quote($name), 
+    	$dbh->quote($robot), $dbh->quote($subject), 
+    	$dbh->quote($web_archive), $dbh->quote($topics),
+    	$dbh->quote($adm_txt),$dbh->quote($ed_txt);
+
+    if ($op eq "UPDATE") {
+	$statement .= sprintf " WHERE robot_list = %s AND name_list = %s ", $dbh->quote($robot), $dbh->quote($name); 
+    }
+
+    unless ($sth = $dbh->prepare($statement)) {
+	do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+	return undef;
+    }
+    unless ($sth->execute) {
+	do_log('err','Unable to execute SQL statement "%s" : %s', $statement, $dbh->errstr);
+    }
+    return 1;
+}
+
 #################################################################
 
 ## Packages must return true.
Index: src/sympa.pl
===================================================================
--- src/sympa.pl	(revision 4540)
+++ src/sympa.pl	(working copy)
@@ -84,6 +84,8 @@
    --dump=list\@dom|ALL                  : dumps subscribers 
    --make_alias_file                     : create file in /tmp with all aliases (usefull when aliases.tpl is changed)
    --lowercase                           : lowercase email addresses in database
+   --sync_db_list[=listname]             : syncs filesystem list configs to the database cache of list configs,
+                                           optionally sync an individual list if specified.
    --create_list --robot=robot_name --input_file=/path/to/file.xml 
                                          : create a list with the xml file under robot_name
    --instantiate_family=family_name  --robot=robot_name --input_file=/path/to/file.xml [--close_unknown] [--quiet]
@@ -120,7 +122,7 @@
 ## Check --dump option
 my %options;
 unless (&GetOptions(\%main::options, 'dump=s', 'debug|d', ,'log_level=s','foreground', 'service=s','config|f=s', 
-		    'lang|l=s', 'mail|m', 'keepcopy|k=s', 'help', 'version', 'import=s','make_alias_file','lowercase',
+		    'lang|l=s', 'mail|m', 'keepcopy|k=s', 'help', 'version', 'import=s','make_alias_file','lowercase', 'sync_db_list',
 		    'close_list=s','purge_list=s','create_list','instantiate_family=s','robot=s','add_list=s','modify_list=s','close_family=s','md5_digest=s',
 		    'input_file=s','sync_include=s','upgrade','from=s','to=s','reload_list_config','list=s','quiet','close_unknown')) {
     &fatal_err("Unknown options.");
@@ -146,7 +148,8 @@
 				$main::options{'md5_digest'} || 
 				$main::options{'sync_include'} ||
 				$main::options{'upgrade'} ||
-				$main::options{'reload_list_config'}
+				$main::options{'reload_list_config'}||
+				$main::options{'sync_db_list'}
 				 );
 
 # Some option force foreground mode
@@ -796,8 +799,17 @@
     print STDOUT $string;
     exit 0;
 }
- 
 
+elsif ($main::options{'sync_db_list'}) {	
+    my $all_lists;
+    $all_lists = &List::get_lists('*');
+    foreach my $list (@$all_lists) {
+	$list->_update_list_db;
+    }
+    exit 0;
+}
+
+
 ## Do we have right access in the directory
 if ($main::options{'keepcopy'}) {
     if (! -d $main::options{'keepcopy'}) {
Index: wwsympa/wwsympa.fcgi
===================================================================
--- wwsympa/wwsympa.fcgi	(revision 4540)
+++ wwsympa/wwsympa.fcgi	(working copy)
@@ -631,12 +631,6 @@
 
 my $birthday = time ;
 
-## If using fast_cgi, it is usefull to initialize all list context
-if ($wwsconf->{'use_fast_cgi'}) {
-
-    my $all_lists = &List::get_lists('*') unless ($maintenance_mode);
-}
-
 # Now internal encoding is same as input/output.
 #XXX## Set output encoding
 #XXX## All outgoing strings will be recoded transparently using this charset
@@ -7166,7 +7160,9 @@
 	 return undef;
      } 
 
-     my $all_lists = &List::get_lists($robot);
+     my $statement = "SELECT name_list FROM list_table WHERE status_list = 'pending'";
+     my @lists = &List::get_lists_db($statement);
+     my $all_lists = &List::get_lists($robot, undef, @lists);
      foreach my $list ( @$all_lists ) {
 	 if ($list->{'admin'}{'status'} eq 'pending') {
 	     $param->{'pending'}{$list->{'name'}}{'subject'} = $list->{'admin'}{'subject'};
@@ -7226,7 +7222,9 @@
      } 
 
      my @unordered_lists;
-     my $all_lists = &List::get_lists($robot);
+     my $statement = "SELECT name_list FROM list_table WHERE status_list in ('closed' , 'family_closed')";
+     my @lists = &List::get_lists_db($statement);
+     my $all_lists = &List::get_lists($robot, undef, @lists);
      foreach my $list ( @$all_lists ) {
 
 	 push @unordered_lists, {'name' => $list->{'name'},
@@ -8274,7 +8272,10 @@
 
      ## Members list
      my $record = 0;
-     my $all_lists = &List::get_lists($robot);
+     my $regexp = $param->{'regexp'};                                                                                                       
+     my $statement = sprintf "SELECT name_list FROM list_table WHERE name_list RLIKE '%s' OR subject_list RLIKE '%s'", $regexp, $regexp;    
+     my @lists = &List::get_lists_db($statement) || undef;                                                                                  
+     my $all_lists = &List::get_lists($robot,undef, @lists);                                                                                
      foreach my $list ( @$all_lists ) {
 	 my $is_admin;
 	 ## Search filter
--- bin/admin.pm_unmodified	2008-02-02 13:54:01.000000000 -0800
+++ bin/admin.pm	2008-02-02 13:54:15.000000000 -0800
@@ -324,6 +324,9 @@
 	$list->create_shared();
     }
 
+    # update db cache of list configs
+    $list->_update_list_db();
+	
     my $return = {};
     $return->{'list'} = $list;
