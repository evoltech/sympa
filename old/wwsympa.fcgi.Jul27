--- ../bin/wwsympa.fcgi	2007-07-27 02:16:20.000000000 -0700
+++ ../sympa-trunk/wwsympa/wwsympa.fcgi	2007-07-06 18:53:40.000000000 -0700
@@ -1,7 +1,7 @@
-#!/usr/bin/perl
+#!--PERL-- --PERLOPT--
 
 # wwsympa.fcgi - This script provides the web interface to Sympa 
-# RCS Identication ; $Revision: 4392 $ ; $Date: 2007-05-09 15:20:09 +0200 (mer, 09 mai 2007) $ 
+# RCS Identication ; $Revision: 4485 $ ; $Date: 2007-07-03 10:48:18 -0700 (Tue, 03 Jul 2007) $ 
 #
 # Sympa - SYsteme de Multi-Postage Automatique
 # Copyright (c) 1997-2003 Comite Reseau des Universites
@@ -40,7 +40,7 @@
 =cut 
 
 ## Change this to point to your Sympa bin directory
-use lib '/home/sympa/bin';
+use lib '--LIBDIR--';
 use Getopt::Long;
 use Archive::Zip;
 
@@ -49,7 +49,7 @@
 use Text::Wrap;
 
 ## Template parser
-require "/home/sympa/bin/tt2.pl";
+require "--LIBDIR--/tt2.pl";
 
 ## Sympa API
 use List;
@@ -69,8 +69,8 @@
 use Mail::Header;
 use Mail::Address;
 
-require "/home/sympa/bin/tools.pl";
-require "/home/sympa/bin/time_utils.pl";
+require "--LIBDIR--/tools.pl";
+require "--LIBDIR--/time_utils.pl";
 
 ## WWSympa librairies
 use wwslib;
@@ -81,8 +81,8 @@
 my $wwsconf = {};
 
 ## Change to your wwsympa.conf location
-my $conf_file = '/etc/sympa/wwsympa.conf';
-my $sympa_conf_file = '/etc/sympa/sympa.conf';
+my $conf_file = '--WWSCONFIG--';
+my $sympa_conf_file = '--CONFIG--';
 
 
 
@@ -591,7 +591,7 @@
 $Language::default_lang = $Conf{'lang'};	 
 
 ## Important to leave this there because it defined defaults for user_data_source
-$List::use_db = &List::check_db_connect();
+&List::check_db_connect();
 
 my $pinfo = &List::_apply_defaults();
 
@@ -612,11 +612,10 @@
 my $birthday = time ;
 
 ## If using fast_cgi, it is usefull to initialize all list context
-#if ($wwsconf->{'use_fast_cgi'}) {
-
-#    my $all_lists = &List::get_lists('*') unless ($maintenance_mode);
-#}
+if ($wwsconf->{'use_fast_cgi'}) {
 
+    my $all_lists = &List::get_lists('*') unless ($maintenance_mode);
+}
 
 # Now internal encoding is same as input/output.
 #XXX## Set output encoding
@@ -646,12 +645,12 @@
      &Language::SetLang($Language::default_lang);
 
      ## Check effective ID
-     unless ($> eq (getpwnam('sympa'))[2]) {
+     unless ($> eq (getpwnam('--USER--'))[2]) {
 	 &report::reject_report_web('intern_quiet','incorrect_server_config',{},'','');
-	 &wwslog('err','Config error: wwsympa should run with UID %s (instead of %s)', (getpwnam('sympa'))[2], $>);
+	 &wwslog('err','Config error: wwsympa should run with UID %s (instead of %s)', (getpwnam('--USER--'))[2], $>);
      }
 
-     unless ($List::use_db = &List::check_db_connect()) {
+     unless (&List::check_db_connect()) {
 	 &report::reject_report_web('system_quiet','no_database',{},'','');
 	 &do_log('info','WWSympa requires a RDBMS to run');
      }
@@ -1333,96 +1332,95 @@
     }
 }
 
- sub get_parameters {
- #    &wwslog('debug4', 'get_parameters');
-
-     ## CGI URL
-     if ($ENV{'HTTPS'} eq 'on') {
-	 $param->{'base_url'} = sprintf 'https://%s', &get_header_field('HTTP_HOST');
-	 $param->{'use_ssl'} = 1;
-     }else {
-	 $param->{'base_url'} = sprintf 'http://%s', &get_header_field('HTTP_HOST');
-	 $param->{'use_ssl'} = 0;
-     }
-
-     $param->{'path_info'} = $ENV{'PATH_INFO'};
-     $param->{'robot_domain'} = $wwsconf->{'robot_domain'}{&get_header_field('SERVER_NAME')};
-
-
-     if ($ENV{'REQUEST_METHOD'} eq 'GET') {
-	 my $path_info = $ENV{'PATH_INFO'};
-	 &do_log('debug', "PATH_INFO: %s",$ENV{'PATH_INFO'});
-
-	 $path_info =~ s+^/++;
-
-	 my $ending_slash = 0;
-	 if ($path_info =~ /\/$/) {
-	     $ending_slash = 1;
-	 }
-
-	 my @params = split /\//, $path_info;
-	 
-
- #	foreach my $i(0..$#params) {
- #	    $params[$i] = &tools::unescape_chars($params[$i]);
- #	}
-
-	 if ($params[0] eq 'nomenu') {
-	     $param->{'nomenu'} = 1;
-	     shift @params;
-	 }
-
-	 ## debug mode
-	 if ($params[0] =~ /debug(\d)?/) {
-	     shift @params;
-	     if ($1) { 
-		 $main::options{'debug_level'} = $1 if ($1);
-	     }else{
-		 $main::options{'debug_level'} = 1 ;
-	     }
-	 }else{
-	     $main::options{'debug_level'} = 0 ;
-	 } 
-	 do_log ('debug2', "debug level $main::options{'debug_level'}");
-
-
-
-	 ## rss mode
+sub get_parameters {
+    #    &wwslog('debug4', 'get_parameters');
+    
+    ## CGI URL
+    if ($ENV{'HTTPS'} eq 'on') {
+	$param->{'base_url'} = sprintf 'https://%s', &get_header_field('HTTP_HOST');
+	$param->{'use_ssl'} = 1;
+    }else {
+	$param->{'base_url'} = sprintf 'http://%s', &get_header_field('HTTP_HOST');
+	$param->{'use_ssl'} = 0;
+    }
+    
+    $param->{'path_info'} = $ENV{'PATH_INFO'};
+    $param->{'robot_domain'} = $wwsconf->{'robot_domain'}{&get_header_field('SERVER_NAME')};
+    
+    if ($ENV{'REQUEST_METHOD'} eq 'GET') {
+	my $path_info = $ENV{'PATH_INFO'};
+	&do_log('debug', "PATH_INFO: %s",$ENV{'PATH_INFO'});
+	
+	$path_info =~ s+^/++;
+	
+	my $ending_slash = 0;
+	if ($path_info =~ /\/$/) {
+	    $ending_slash = 1;
+	}
+	
+	my @params = split /\//, $path_info;
+	
+	
+	#	foreach my $i(0..$#params) {
+	#	    $params[$i] = &tools::unescape_chars($params[$i]);
+	#	}
+	
+	if ($params[0] eq 'nomenu') {
+	    $param->{'nomenu'} = 1;
+	    shift @params;
+	}
+	
+	## debug mode
+	if ($params[0] =~ /debug(\d)?/) {
+	    shift @params;
+	    if ($1) { 
+		$main::options{'debug_level'} = $1 if ($1);
+	    }else{
+		$main::options{'debug_level'} = 1 ;
+	    }
+	}else{
+	    $main::options{'debug_level'} = 0 ;
+	} 
+	do_log ('debug2', "debug level $main::options{'debug_level'}");
+	
+	
+	
+	## rss mode
 ########### /^rss$/ ???
-	 if ($params[0] eq 'rss') {
-	     shift @params;
-	     $rss = 1;
-	 } 
-
-	 if ($#params >= 0) {
-	     $in{'action'} = $params[0];
-
-	     my $args;
-	     if (defined $action_args{$in{'action'}}) {
-		 $args = $action_args{$in{'action'}};
-	     }else {
-		 $args = $action_args{'default'};
-	     }
-
-	     my $i = 1;
-	     foreach my $p (@$args) {
-		 my $pname;
-		 ## More than 1 param
-		 if ($p =~ /^\@(\w+)$/) {
-		     $pname = $1;
-
-		     $in{$pname} = join '/', @params[$i..$#params];
-		     $in{$pname} .= '/' if $ending_slash;
-		     last;
-		 }else {
-		     $pname = $p;
-		     $in{$pname} = $params[$i];
-		 }
-		 $i++;
-	     }
-	 }
-     }elsif ($ENV{'REQUEST_METHOD'} eq 'POST') {
-	 ## POST
+	if ($params[0] eq 'rss') {
+	    shift @params;
+	    $rss = 1;
+	} 
+	
+	if ($#params >= 0) {
+	    $in{'action'} = $params[0];
+	    
+	    my $args;
+	    if (defined $action_args{$in{'action'}}) {
+		$args = $action_args{$in{'action'}};
+	    }else {
+		$args = $action_args{'default'};
+	    }
+	    
+	    my $i = 1;
+	    foreach my $p (@$args) {
+		my $pname;
+		## More than 1 param
+		if ($p =~ /^\@(\w+)$/) {
+		    $pname = $1;
+		    $in{$pname} = join '/', @params[$i..$#params];
+		    $in{$pname} .= '/' if $ending_slash;
+		    last;
+		}
+		else {
+		    $pname = $p;
+		    $in{$pname} = $params[$i];
+		}
+		$i++;
+	    }
+	}
+    }elsif ($ENV{'REQUEST_METHOD'} eq 'POST') {
+	    ## POST
 
 	 if ($in{'javascript_action'}) { 
 	     ## because of incompatibility javascript
@@ -1475,9 +1473,9 @@
 	     $regexp = $in_regexp{'additional_field'};
 	 }elsif ($in_regexp{$pname}) {
 	     $regexp = $in_regexp{$pname};
-	     }else {
-		 $regexp = $in_regexp{'*'};
-	     }
+	 }else {
+	     $regexp = $in_regexp{'*'};
+	 }
 	 foreach my $one_p (split /\0/, $in{$p}) {
 	     unless ($one_p =~ /^$regexp$/s) {
 		 ## Dump parameters in a tmp file for later analysis
@@ -1487,12 +1485,40 @@
 		 }
 		 &tools::dump_var(\%in, 0, \*DUMP);
 		 close DUMP;
-
+		 
 		 &report::reject_report_web('user','syntax_errors',{'params' => $p},'','');
 		 &wwslog('err','get_parameters: syntax error for parameter %s value \'%s\' not conform to regexp /^%s$/ ; dumped vars in %s', $pname, $one_p, $regexp,  $dump_file);
 		 $in{$p} = '';
 		 next;
 	     }
+	     #### Starting XSS check
+	     ## Check if parameter can legitimately use HTML. This selects the regexp used.
+	     my %htmlAllowedParams = ('content' => 1,);
+	     
+	     my $xssregexp;
+	     if ($htmlAllowedParams{$p}) {
+		 $xssregexp = &tools::get_regexp('xss-free');
+	     }
+	     else {
+		 $xssregexp = &tools::get_regexp('html-free');
+	     }
+	     ## Checking if parameter value matches the XSS regexp. If yes, its value is ignored in further processing.
+	     if (lc($one_p) =~ /$xssregexp/) {
+		 &wwslog('err','%s part of parameter %s matched regexp. Rejecting.',$&,$p);
+		 ## Dump parameters in a tmp file for later analysis
+		 my $dump_file =  &Conf::get_robot_conf($robot, 'tmpdir').'/sympa_dump.'.time.'.'.$$;
+		 unless (open DUMP, ">$dump_file") {
+		     &wwslog('err','get_parameters: failed to create %s : %s', $dump_file, $!);		     
+		 }
+		 &tools::dump_var(\%in, 0, \*DUMP);
+		 close DUMP;
+		 
+		 &report::reject_report_web('user','syntax_errors',{'params' => $p},'','');
+		 &wwslog('err','get_parameters: syntax error for parameter %s value \'%s\' showing signs of potential XSS threat ; dumped vars in %s', $pname, $one_p, $dump_file);
+		 $in{$p} = '';
+		 next;
+	     }
+	     #### End of XSS check
 	 }
      }
 
@@ -3482,6 +3508,15 @@
      ## Additional DB fields
      my @additional_fields = split ',', $Conf{'db_additional_subscriber_fields'};
 
+     ## Members list synchronization if list has included data sources.
+     if ($list->has_include_data_sources()) {
+	 if ($list->on_the_fly_sync_include('use_ttl'=>1)) {
+	     &report::notice_report_web('subscribers_updated',{},$param->{'action'});
+	 }else {
+	     &report::reject_report_web('intern','sync_include_failed',{},$param->{'action'},$list,$param->{'user'}{'email'},$robot);
+	 }
+     }
+
      ## Members list
      $count = -1;
      for (my $i = $list->get_first_user({'sortby' => $sortby, 
@@ -7130,9 +7165,7 @@
 	 return undef;
      } 
 
-     my $statement = "SELECT `name_list` FROM `list_table` WHERE `status_list` = 'pending'";
-     my @lists = &List::get_lists_db($statement);
-     my $all_lists = &List::get_lists($robot, undef, @lists);
+     my $all_lists = &List::get_lists($robot);
      foreach my $list ( @$all_lists ) {
 	 if ($list->{'admin'}{'status'} eq 'pending') {
 	     $param->{'pending'}{$list->{'name'}}{'subject'} = $list->{'admin'}{'subject'};
@@ -7161,9 +7194,7 @@
 	 return undef;
      } 
 
-     my $statement = "SELECT `name_list` FROM `list_table` WHERE `status_list` = 'closed' OR `status_list` = 'family_closed'";
-     my @lists = &List::get_lists_db($statement);
-     my $all_lists = &List::get_lists($robot, undef, @lists);
+     my $all_lists = &List::get_lists($robot);
      foreach my $list ( @$all_lists ) {
 	 if ($list->{'admin'}{'status'} eq 'closed' ||
 	     $list->{'admin'}{'status'} eq 'family_closed') {
@@ -7230,11 +7261,7 @@
      } 
 
      my @unordered_lists;
-     ## [XXX] TODO: Select only lists that are not closed
-    my $statement = sprintf "SELECT name_list FROM list_table WHERE status_list = 'closed'";
-    my @lists = &List::get_lists_db($statement);
-        
-     my $all_lists = &List::get_lists($robot, undef, \@lists);
+     my $all_lists = &List::get_lists($robot);
      foreach my $list ( @$all_lists ) {
 
 	 ## skip closed lists
@@ -7897,9 +7924,9 @@
      &wwslog('info', 'do_scenario_test');
 
      ## List available scenarii
-     unless (opendir SCENARI, "/home/sympa/bin/etc/scenari/"){
-	 &report::reject_report_web('intern','cannot_open_dir',{'dir' => "/home/sympa/bin/etc/scenari/"},$param->{'action'},$list,$param->{'user'}{'email'},$robot);
-	 &wwslog('info',"do_scenario_test : unable to open /home/sympa/bin/etc/scenari");
+     unless (opendir SCENARI, "--ETCBINDIR--/scenari/"){
+	 &report::reject_report_web('intern','cannot_open_dir',{'dir' => "--ETCBINDIR--/scenari/"},$param->{'action'},$list,$param->{'user'}{'email'},$robot);
+	 &wwslog('info',"do_scenario_test : unable to open --ETCBINDIR--/scenari");
 	 return undef;
      }
 
@@ -8198,10 +8225,7 @@
 	 return undef;
      }
 
-     ## [XXX] TODO: Select only lists configured with web_archive
-     my $statement = "SELECT `name_list` FROM `list_table` WHERE `web_archive_list` is TRUE";
-     my @lists = &List::get_lists_db($statement);
-     my $all_lists = &List::get_lists($robot, undef, @lists);
+     my $all_lists = &List::get_lists($robot);
      foreach my $list ( @$all_lists ) {
 	 next unless (defined $list->{'admin'}{'web_archive'});
 	 my $file = $Conf{'queueoutgoing'}.'/.rebuild.'.$list->get_list_id();
@@ -8245,14 +8269,12 @@
 
      ## Members list
      my $record = 0;
-     my $regexp = $param->{'regexp'};
-     my $statement = sprintf "SELECT name_list FROM list_table WHERE name_list RLIKE '%s' OR subject_list RLIKE '%s'", $regexp, $regexp;
-     my @lists = &List::get_lists_db($statement) || undef;
-     my $all_lists = &List::get_lists($robot,undef, @lists);
+     my $all_lists = &List::get_lists($robot);
      foreach my $list ( @$all_lists ) {
 	 my $is_admin;
 	 ## Search filter
-	 my $regtest = eval { (($list->{'name'} !~ /$param->{'regexp'}/i) && ($list->{'admin'}{'subject'} !~ /$param->{'regexp'}/i)) };
+	 my $regtest = eval { (($list->{'name'} !~ /$param->{'regexp'}/i)
+			       && ($list->{'admin'}{'subject'} !~ /$param->{'regexp'}/i)) };
 	 unless (defined($regtest)) {
 	     &report::reject_report_web('user','syntax_errors',{'params' => 'filter'},$param->{'action'});
  	     &wwslog('err','do_search_list: syntax error');
@@ -8729,11 +8751,9 @@
  	  return undef;
       }
 
-     ## remove existing sync_include task
-     ## to start a new one
-     if ($data_source_updated && ($list->{'admin'}{'user_data_source'} eq 'include2')) {
-	 $list->remove_task('sync_include');
-	 if ($list->sync_include()) {
+     ## If list has included data sources, update them and delete sync_include task.
+     if ($data_source_updated && ($list->has_include_data_sources())) {
+	 if ($list->on_the_fly_sync_include('use_ttl'=>0)) {
 	     &report::notice_report_web('subscribers_updated',{},$param->{'action'});
 	 }else {
 	     &report::reject_report_web('intern','sync_include_failed',{},$param->{'action'},$list,$param->{'user'}{'email'},$robot);
@@ -15933,7 +15953,7 @@
 sub do_wsdl {
   
     &wwslog('info', "do_wsdl ()");
-    my $sympawsdl = '/home/sympa/bin/etc/sympa.wsdl';
+    my $sympawsdl = '--ETCBINDIR--/sympa.wsdl';
 
     unless (-r $sympawsdl){
       	&report::reject_report_web('intern','err_404',{},$param->{'action'});
@@ -15953,7 +15973,7 @@
     
    $param->{'conf'}{'soap_url'}  = $soap_url;
 
-    &tt2::parse_tt2($param, 'sympa.wsdl' , \*STDOUT, ['/home/sympa/bin/etc']);
+    &tt2::parse_tt2($param, 'sympa.wsdl' , \*STDOUT, ['--ETCBINDIR--']);
     
 #    unless (open (WSDL,$sympawsdl)) {
 # 	&error_message('404');
