#!/usr/bin/perl -w
# prepscenari - prepare an upstream scenari tree with our changes before
#  doing a diff with an existing tree
# Matt Taggart <taggart@riseup.net> "2011-12

use vars qw($upstream $new @delete %rename);

# files to delete
@delete = qw(
   *.intranet*
   automatic_list_creation.public
   d_edit.private-https
   d_edit.public
   d_read.private-https
   review.public
   unsubscribe.closed
   unsubscribe.owner
   );

# We might start deleting these later
   #invite.impossible
   #subscribe.impossible
   #unsubscribe.auth
   #unsubscribe.auth_notify

# files to rename
%rename = (
   'access_web_archive.public' => 'access_web_archive.anyone',
   'd_read.public' => 'd_read.anyone',
   'info.open'=> 'info.anyone',
   'invite.public' => 'invite.anyone',
   'unsubscribe.open' => 'unsubscribe.anyone',
   'visibility.noconceal' => 'visibility.anyone',
   'unsubscribe.open_notify' => 'unsubscribe.anyone_notify',

   'access_web_archive.private' => 'access_web_archive.members',
   'd_edit.private' => 'd_edit.members',
   'd_read.private' => 'd_read.members',
   'info.private' => 'info.members',
   'invite.private' => 'invite.members',
   'review.private' => 'review.members',
   'visibility.conceal' => 'visibility.members',

   'access_web_archive.owner' => 'access_web_archive.owners',
   'add.owner' => 'add.owners',
   'd_edit.owner' => 'd_edit.owners',
   'del.owner' => 'del.owners',
   'd_read.owner' => 'd_read.owners',
   'invite.owner' => 'invite.owners',
   'remind.owner' => 'remind.owners',
   'review.owner' => 'review.owners',

   'd_edit.editor' => 'd_edit.editors',

   'subscribe.auth' => 'subscribe.verified',
   'subscribe.auth_notify' => 'subscribe.verified_notify',

   'send.newsletterkeyonly' => 'send.newsletter_verify'
);

# default symlinks to create
%default = (
   'add.default' => 'add.owners',
   'd_edit.default' => 'd_edit.editors',
   'del.default' => 'del.owners',
   'd_read.default' => 'd_read.members',
   'info.default' => 'info.anyone',
   'invite.default' => 'invite.closed',
   'remind.default' => 'remind.owners',
   'review.default' => 'review.owners',
   'send.default' => 'send.members_or_moderated',
   'subscribe.default' => 'subscribe.verified',
   'topics_visibility.default' => 'topics_visibility.noconceal',
   'unsubscribe.default' => 'unsubscribe.anyone',
   'visibility.default' => 'visibility.anyone'
);

# check for arguments and store them
if (!$ARGV[1]) {
   print "usage: prepscenari <upstream dir> <new dir>\n";
   exit;
}

$upstream=$ARGV[0];
$new=$ARGV[1];

# make sure source and target are ok
if ( ! -d $upstream ) {
   die "ERROR: directory $upstream doesn't exist\n";
}

if ( ! -d $new ) {
   mkdir $new or die "ERROR: can't create $new\n";
}

# copy the source scenari to the target
if (system("cp $upstream/* $new/")) {
  die "ERROR: copy of scenari dir failed\n";
}

# remove the things we delete
foreach $file (@delete) {
   if (system("rm -f $new/$file")) {
      die "ERROR: could not remove $new/$file\n";
   }
}

# do the renames
foreach $key (keys %rename) {
   rename("$new/$key","$new/$rename{$key}") or die "could not rename $key\n";
}

# setup the default symlinks
foreach $key (keys %default) {
   symlink("$default{$key}","$new/$key") or die "could not create symlink $key\n";
}
