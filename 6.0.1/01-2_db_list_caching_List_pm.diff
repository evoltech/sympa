--- List.pm.orig	2009-12-18 12:49:01.000000000 -0800
+++ src/lib/List.pm	2009-12-18 13:47:55.000000000 -0800
@@ -1823,6 +1823,12 @@
 	return undef;
     }
 
+    if ($List::use_db) {
+        unless (&_update_list_db) {
+            &do_log('err', "Unable to update list_table");
+        }
+    }
+
     return 1;
 }
 
@@ -11506,6 +11512,141 @@
     return $self->{'name'}.'@'.$self->{'domain'};
 }
 
+## Support for list config caching in database
+
+sub get_lists_db {
+    my $statement = shift;
+    return undef unless defined($statement);
+    do_log('info', 'List::get_search_list_db(%s)', $statement);
+
+    unless ($List::use_db) {
+       &do_log('info', 'Sympa not setup to use DBI');
+       return undef;
+    }
+    
+    my ($l, @lists);
+
+    ## Check database connection
+    unless ($dbh and $dbh->ping) {
+       return undef unless &db_connect();
+    }     
+    push @sth_stack, $sth; 
+    &do_log('debug2','SQL: %s', $statement);
+    unless ($sth = $dbh->prepare($statement)) { 
+       &do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+       return undef;
+    } 
+    unless ($sth->execute) {
+       do_log('err','Unable to execute SQL statement "%s" : %s', $statement, $dbh->errstr); 
+       return undef;
+    } 
+    while ($l = $sth->fetchrow_hashref) {
+       my $name = $l->{'name_list'};
+       push @lists, $name;
+    }  
+    $sth->finish();
+    $sth = pop @sth_stack;
+
+    return \@lists;
+}
+
+sub _update_list_db
+{
+    my ($self) = shift;
+    my @admins;
+    my $i;
+    my $adm_txt;
+    my $ed_txt;
+    my $statement = sprintf "SELECT COUNT(*) FROM list_table WHERE name_list = %s AND robot_list = %s" , $dbh->quote($self->{'name'}), $dbh->quote($self->{'admin'}{'host'});  
+    unless ($sth = $dbh->prepare($statement)) {
+       do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+       return undef;
+    }
+    my $ret;
+    unless ($sth->execute) {
+       do_log('err',"Unable to execute SQL statement '%s' : %s", $statement, $dbh->errstr);
+       return undef;
+    }
+    
+    my $op = "UPDATE";
+    my $set = "";
+    my $ret = $sth->fetchrow_arrayref;
+    $sth->finish;
+    my $count = $ret->[0];
+    unless ($count > 0) {
+       $op = "INSERT INTO";
+       $set = "";
+    }
+
+    my $name = $self->{'name'};
+    my $subject = $self->{'admin'}{'subject'} || '';
+    my $status = $self->{'admin'}{'status'};
+    my $robot = $self->{'admin'}{'host'};
+    my $web_archive  = &is_web_archived($self) || 0; 
+    my $topics = '';
+    if ($self->{'admin'}{'topics'}) {
+       $topics = join(',',@{$self->{'admin'}{'topics'}});
+    }
+    
+    foreach $i (@{$self->{'admin'}{'owner'}}) {
+       if (ref($i->{'email'})) {
+           push(@admins, @{$i->{'email'}});
+       } elsif ($i->{'email'}) {
+           push(@admins, $i->{'email'});
+       }
+    }
+    $adm_txt = join(',',@admins) || '';
+
+    undef @admins;
+    foreach $i (@{$self->{'admin'}{'editor'}}) {
+       if (ref($i->{'email'})) {
+           push(@admins, @{$i->{'email'}});
+       } elsif ($i->{'email'}) {
+           push(@admins, $i->{'email'});
+       }
+    }
+    $ed_txt = join(',',@admins) || '';
+
+    my $statement = sprintf "%s `list_table` %s SET status_list= %s, name_list=%s, robot_list=%s, subject_list=%s, web_archive_list=%s, topics=%s, owners=%s, editors=%s ",
+       $op, $set, $dbh->quote($status), $dbh->quote($name), 
+       $dbh->quote($robot), $dbh->quote($subject), 
+       $dbh->quote($web_archive), $dbh->quote($topics),
+       $dbh->quote($adm_txt),$dbh->quote($ed_txt);
+
+    if ($op eq "UPDATE") {
+       $statement .= sprintf " WHERE robot_list = %s AND name_list = %s ", $dbh->quote($robot), $dbh->quote($name); 
+    }
+
+    unless ($sth = $dbh->prepare($statement)) {
+       do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+       return undef;
+    }
+    unless ($sth->execute) {
+       do_log('err','Unable to execute SQL statement "%s" : %s', $statement, $dbh->errstr);
+    }
+    return 1;
+}
+sub _flush_list_db
+{
+    my ($listname) = shift;
+    my $statement;
+    unless ($listname) {
+        $statement =  "TRUNCATE list_table";
+    } else {
+        $statement = sprintf "DELETE FROM list_table WHERE name_list = %s", $dbh->quote($listname);
+    } 
+
+    unless ($sth = $dbh->prepare($statement)) {
+    do_log('err','Unable to prepare SQL statement : %s', $dbh->errstr);
+    return undef;
+    }
+    unless ($sth->execute) {
+    do_log('err',"Unable to execute SQL statement '%s' : %s", $statement, $dbh->errstr);
+    return undef;
+    }
+}
+
+
 ###### END of the List package ######
 
 1;
